#!/usr/bin/env bash

# Environment setup
set -eo pipefail

function print_usage() {
    # shellcheck disable=SC2312
    cat <<EOF
Usage: elgato <command> <ip_address_list> [--help]

Elgato light management for Bash

Command list:
  on                 Turn the light(s) on
  off                Turn the light(s) off

Example:
$ elgato on 172.30.1.181 172.30.1.143

Dependencies:
  curl               The Client for URLs CLI tool

Required arguments:
  command            The light command, see above
  ip_address_list    A space separated list of light IP addresses

Optional arguments:
  -h, --help         Show this help message and exit
EOF
}

if [[ $# -lt 2 || "${1}" == "-h" || "${1}" == "--help" ]]; then
    print_usage
    exit 1
fi

# Dependency check
for cmd in curl; do
    if ! command -v "${cmd}" >/dev/null; then
        log_error "ERROR: Missing dependency - '${cmd}'"
        exit 1
    fi
done

# -----------------------------------------------------------------------------
#  Argument assignment
# -----------------------------------------------------------------------------

declare light_command="${1}"
shift

declare -a light_ips
for arg in "$@"; do
    light_ips+=("${arg}")
done

declare -a valid_commands=("on" "off")
if [[ ! "${valid_commands[*]}" =~ ${light_command} ]]; then
    echo "The command '${light_command}' is not valid."
    exit 1
fi

# -----------------------------------------------------------------------------
#  Colour and log definitions
# -----------------------------------------------------------------------------

export RED=$'\033[31m'
export BGRED=$'\033[41m'
export GREEN=$'\033[32m'
export MAGENTA=$'\033[35m'
export CYAN=$'\033[36m'
export BLUE=$'\033[34m'
export YELLOW=$'\033[33m'
export WHITE=$'\033[37m'
export NORMAL=$'\033[00m'
export BOLD=$'\033[01m'
export CLEARLINE=$'\033[K'

function log_line() {
    # Usage: log_line <character> <length>
    # Defaults character: '-' length: 80
    local length=80
    local char="-"
    if [[ -n $1 ]]; then
        char="$1"
    fi
    if [[ -n $2 ]]; then
        length="$2"
    fi
    # shellcheck disable=SC2312
    printf "${BOLD}${MAGENTA}${char}%.0s${NORMAL}" $(seq 1 "${length}") >&2
    echo
}

function log_title() {
    printf "\n${BOLD}${GREEN}%s${NORMAL}\n" "$@" >&2
    log_line "="
}

function log_header() {
    printf "\n${GREEN}${GREEN}%s${NORMAL}\n" "$@" >&2
    local title="$*"
    local length=${#title}
    log_line "-" "${length}"
}

function log_message() {
    printf "${NORMAL}%s${NORMAL}\n" "$@" >&2
}

function log_warning() {
    printf "${YELLOW}%s${NORMAL}\n" "$@" >&2
}

function log_error() {
    printf "${RED}%s${NORMAL}\n" "$@" >&2
}

function log_success() {
    printf "${GREEN}✔${NORMAL} %b\n" "${@}"
}

function log_failure() {
    printf "${RED}✖${NORMAL} %b\n" "${@}"
}

# -----------------------------------------------------------------------------
#  Body
# -----------------------------------------------------------------------------

function turn_on() {
    if curl -s -m 4 -X PUT -H "Content-Type: application/json" -d '{"numberOfLights":1,"lights":[{"on":1}]}' "http://${light_ip}:9123/elgato/lights" >/dev/null 2>&1; then
        log_success "Success: ${light_ip}"
        return
    fi
    log_failure "Failure: ${light_ip}"
}

function turn_off() {
    if curl -s -m 4 -X PUT -H "Content-Type: application/json" -d '{"numberOfLights":1,"lights":[{"on":0}]}' "http://${light_ip}:9123/elgato/lights" >/dev/null 2>&1; then
        log_success "Success: ${light_ip}"
        return
    fi
    log_failure "Failure: ${light_ip}"
}

log_title " Elgato Light Management"
# shellcheck disable=SC2312
log_message "  Command: ${light_command}"
for light_ip in "${light_ips[@]}"; do
    log_message " Light IP: ${light_ip}"
done

if [[ "${light_command}" == "on" ]]; then
    log_header " Power On"
    for light_ip in "${light_ips[@]}"; do
        turn_on &
    done
fi

if [[ "${light_command}" == "off" ]]; then
    log_header " Power Off"
    for light_ip in "${light_ips[@]}"; do
        turn_off &
    done
fi

wait
